// Find output DOM associated to the DOM element passed as parameter
function findOutputForSlider( element ) {
   var idVal = element.id;
   outputs = document.getElementsByTagName( 'output' );
   for( var i = 0; i < outputs.length; i++ ) {
     if ( outputs[ i ].htmlFor == idVal )
       return outputs[ i ];
   }
}

function getSliderOutputPosition( slider ) {
  // Update output position
  var newPlace,
      minValue;

  var style = window.getComputedStyle( slider, null );
  // Measure width of range input
  sliderWidth = parseInt( style.getPropertyValue( 'width' ), 10 );

  // Figure out placement percentage between left and right of input
  if ( !slider.getAttribute( 'min' ) ) {
    minValue = 0;
  } else {
    minValue = slider.getAttribute( 'min' );
  }
  var newPoint = ( slider.value - minValue ) / ( slider.getAttribute( 'max' ) - minValue );

  // Prevent bubble from going beyond left or right (unsupported browsers)
  if ( newPoint < 0 ) {
    newPlace = 0;
  } else if ( newPoint > 1 ) {
    newPlace = sliderWidth;
  } else {
    newPlace = sliderWidth * newPoint;
  }

  return {
    'position': newPlace + 'px'
  }
}


$(function() {
    var id = #{myId};
    var slider = $('#' + id);
    var output = findOutputForSlider(slider[0]);

    if (slider.hasClass('has-output-tooltip')) {
        var newPosition = getSliderOutputPosition(slider[0]);
        output.style['left'] = newPosition.position;
    }
    output.value = slider.val();
    slider.on('input', function (e) {
        if (slider.hasClass('has-output-tooltip')) {
            var newPosition = getSliderOutputPosition(slider[0]);
            output.style['left'] = newPosition.position;
        }

        output.value = e.target.value;
    })
})
